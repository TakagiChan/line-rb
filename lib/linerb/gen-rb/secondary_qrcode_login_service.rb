#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require_relative 'takagi_chan_types'

module SecondaryQrcodeLoginService
  class Client
    include ::Thrift::Client

    def createSession(request)
      send_createSession(request)
      return recv_createSession()
    end

    def send_createSession(request)
      send_message('createSession', CreateSession_args, :request => request)
    end

    def recv_createSession()
      result = receive_message(CreateSession_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'createSession failed: unknown result')
    end

    def createQrCode(request)
      send_createQrCode(request)
      return recv_createQrCode()
    end

    def send_createQrCode(request)
      send_message('createQrCode', CreateQrCode_args, :request => request)
    end

    def recv_createQrCode()
      result = receive_message(CreateQrCode_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'createQrCode failed: unknown result')
    end

    def createPinCode(request)
      send_createPinCode(request)
      return recv_createPinCode()
    end

    def send_createPinCode(request)
      send_message('createPinCode', CreatePinCode_args, :request => request)
    end

    def recv_createPinCode()
      result = receive_message(CreatePinCode_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'createPinCode failed: unknown result')
    end

    def qrCodeLogin(request)
      send_qrCodeLogin(request)
      return recv_qrCodeLogin()
    end

    def send_qrCodeLogin(request)
      send_message('qrCodeLogin', QrCodeLogin_args, :request => request)
    end

    def recv_qrCodeLogin()
      result = receive_message(QrCodeLogin_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'qrCodeLogin failed: unknown result')
    end

    def verifyCertificate(request)
      send_verifyCertificate(request)
      recv_verifyCertificate()
    end

    def send_verifyCertificate(request)
      send_message('verifyCertificate', VerifyCertificate_args, :request => request)
    end

    def recv_verifyCertificate()
      result = receive_message(VerifyCertificate_result)
      raise result.e unless result.e.nil?
      return
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_createSession(seqid, iprot, oprot)
      args = read_args(iprot, CreateSession_args)
      result = CreateSession_result.new()
      begin
        result.success = @handler.createSession(args.request)
      rescue ::SecondaryQrCodeException => e
        result.e = e
      end
      write_result(result, oprot, 'createSession', seqid)
    end

    def process_createQrCode(seqid, iprot, oprot)
      args = read_args(iprot, CreateQrCode_args)
      result = CreateQrCode_result.new()
      begin
        result.success = @handler.createQrCode(args.request)
      rescue ::SecondaryQrCodeException => e
        result.e = e
      end
      write_result(result, oprot, 'createQrCode', seqid)
    end

    def process_createPinCode(seqid, iprot, oprot)
      args = read_args(iprot, CreatePinCode_args)
      result = CreatePinCode_result.new()
      begin
        result.success = @handler.createPinCode(args.request)
      rescue ::SecondaryQrCodeException => e
        result.e = e
      end
      write_result(result, oprot, 'createPinCode', seqid)
    end

    def process_qrCodeLogin(seqid, iprot, oprot)
      args = read_args(iprot, QrCodeLogin_args)
      result = QrCodeLogin_result.new()
      begin
        result.success = @handler.qrCodeLogin(args.request)
      rescue ::SecondaryQrCodeException => e
        result.e = e
      end
      write_result(result, oprot, 'qrCodeLogin', seqid)
    end

    def process_verifyCertificate(seqid, iprot, oprot)
      args = read_args(iprot, VerifyCertificate_args)
      result = VerifyCertificate_result.new()
      begin
        @handler.verifyCertificate(args.request)
      rescue ::SecondaryQrCodeException => e
        result.e = e
      end
      write_result(result, oprot, 'verifyCertificate', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class CreateSession_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::CreateQrSessionRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateSession_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CreateQrSessionResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SecondaryQrCodeException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateQrCode_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::CreateQrCodeRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateQrCode_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CreateQrCodeResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SecondaryQrCodeException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreatePinCode_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::CreatePinCodeRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreatePinCode_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CreatePinCodeResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SecondaryQrCodeException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class QrCodeLogin_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::QrCodeLoginRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class QrCodeLogin_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::QrCodeLoginResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SecondaryQrCodeException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class VerifyCertificate_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::VerifyCertificateRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class VerifyCertificate_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SecondaryQrCodeException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

