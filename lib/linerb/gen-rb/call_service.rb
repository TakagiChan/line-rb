#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require_relative 'takagi_chan_types'

module CallService
  class Client
    include ::Thrift::Client

    def getGroupCallUrlInfo(request)
      send_getGroupCallUrlInfo(request)
      return recv_getGroupCallUrlInfo()
    end

    def send_getGroupCallUrlInfo(request)
      send_message('getGroupCallUrlInfo', GetGroupCallUrlInfo_args, :request => request)
    end

    def recv_getGroupCallUrlInfo()
      result = receive_message(GetGroupCallUrlInfo_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGroupCallUrlInfo failed: unknown result')
    end

    def getGroupCallUrls(request)
      send_getGroupCallUrls(request)
      return recv_getGroupCallUrls()
    end

    def send_getGroupCallUrls(request)
      send_message('getGroupCallUrls', GetGroupCallUrls_args, :request => request)
    end

    def recv_getGroupCallUrls()
      result = receive_message(GetGroupCallUrls_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGroupCallUrls failed: unknown result')
    end

    def joinChatByCallUrl(request)
      send_joinChatByCallUrl(request)
      return recv_joinChatByCallUrl()
    end

    def send_joinChatByCallUrl(request)
      send_message('joinChatByCallUrl', JoinChatByCallUrl_args, :request => request)
    end

    def recv_joinChatByCallUrl()
      result = receive_message(JoinChatByCallUrl_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'joinChatByCallUrl failed: unknown result')
    end

    def createGroupCallUrl(request)
      send_createGroupCallUrl(request)
      return recv_createGroupCallUrl()
    end

    def send_createGroupCallUrl(request)
      send_message('createGroupCallUrl', CreateGroupCallUrl_args, :request => request)
    end

    def recv_createGroupCallUrl()
      result = receive_message(CreateGroupCallUrl_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'createGroupCallUrl failed: unknown result')
    end

    def deleteGroupCallUrl(request)
      send_deleteGroupCallUrl(request)
      recv_deleteGroupCallUrl()
    end

    def send_deleteGroupCallUrl(request)
      send_message('deleteGroupCallUrl', DeleteGroupCallUrl_args, :request => request)
    end

    def recv_deleteGroupCallUrl()
      result = receive_message(DeleteGroupCallUrl_result)
      return
    end

    def updateGroupCallUrl(request)
      send_updateGroupCallUrl(request)
      return recv_updateGroupCallUrl()
    end

    def send_updateGroupCallUrl(request)
      send_message('updateGroupCallUrl', UpdateGroupCallUrl_args, :request => request)
    end

    def recv_updateGroupCallUrl()
      result = receive_message(UpdateGroupCallUrl_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateGroupCallUrl failed: unknown result')
    end

    def getCallCreditPurchaseHistory(request)
      send_getCallCreditPurchaseHistory(request)
      return recv_getCallCreditPurchaseHistory()
    end

    def send_getCallCreditPurchaseHistory(request)
      send_message('getCallCreditPurchaseHistory', GetCallCreditPurchaseHistory_args, :request => request)
    end

    def recv_getCallCreditPurchaseHistory()
      result = receive_message(GetCallCreditPurchaseHistory_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getCallCreditPurchaseHistory failed: unknown result')
    end

    def redeemPaidCallVoucher(serial, language)
      send_redeemPaidCallVoucher(serial, language)
      return recv_redeemPaidCallVoucher()
    end

    def send_redeemPaidCallVoucher(serial, language)
      send_message('redeemPaidCallVoucher', RedeemPaidCallVoucher_args, :serial => serial, :language => language)
    end

    def recv_redeemPaidCallVoucher()
      result = receive_message(RedeemPaidCallVoucher_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'redeemPaidCallVoucher failed: unknown result')
    end

    def getCallCreditProducts(appStoreCode, pgCode, country, language)
      send_getCallCreditProducts(appStoreCode, pgCode, country, language)
      return recv_getCallCreditProducts()
    end

    def send_getCallCreditProducts(appStoreCode, pgCode, country, language)
      send_message('getCallCreditProducts', GetCallCreditProducts_args, :appStoreCode => appStoreCode, :pgCode => pgCode, :country => country, :language => language)
    end

    def recv_getCallCreditProducts()
      result = receive_message(GetCallCreditProducts_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getCallCreditProducts failed: unknown result')
    end

    def getPaidCallMetadata(language)
      send_getPaidCallMetadata(language)
      return recv_getPaidCallMetadata()
    end

    def send_getPaidCallMetadata(language)
      send_message('getPaidCallMetadata', GetPaidCallMetadata_args, :language => language)
    end

    def recv_getPaidCallMetadata()
      result = receive_message(GetPaidCallMetadata_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getPaidCallMetadata failed: unknown result')
    end

    def getPaidCallBalanceList(language)
      send_getPaidCallBalanceList(language)
      return recv_getPaidCallBalanceList()
    end

    def send_getPaidCallBalanceList(language)
      send_message('getPaidCallBalanceList', GetPaidCallBalanceList_args, :language => language)
    end

    def recv_getPaidCallBalanceList()
      result = receive_message(GetPaidCallBalanceList_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getPaidCallBalanceList failed: unknown result')
    end

    def searchPaidCallUserRate(countryCode, language)
      send_searchPaidCallUserRate(countryCode, language)
      return recv_searchPaidCallUserRate()
    end

    def send_searchPaidCallUserRate(countryCode, language)
      send_message('searchPaidCallUserRate', SearchPaidCallUserRate_args, :countryCode => countryCode, :language => language)
    end

    def recv_searchPaidCallUserRate()
      result = receive_message(SearchPaidCallUserRate_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'searchPaidCallUserRate failed: unknown result')
    end

    def lookupPaidCall(dialedNumber, language, referer)
      send_lookupPaidCall(dialedNumber, language, referer)
      return recv_lookupPaidCall()
    end

    def send_lookupPaidCall(dialedNumber, language, referer)
      send_message('lookupPaidCall', LookupPaidCall_args, :dialedNumber => dialedNumber, :language => language, :referer => referer)
    end

    def recv_lookupPaidCall()
      result = receive_message(LookupPaidCall_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'lookupPaidCall failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_getGroupCallUrlInfo(seqid, iprot, oprot)
      args = read_args(iprot, GetGroupCallUrlInfo_args)
      result = GetGroupCallUrlInfo_result.new()
      begin
        result.success = @handler.getGroupCallUrlInfo(args.request)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getGroupCallUrlInfo', seqid)
    end

    def process_getGroupCallUrls(seqid, iprot, oprot)
      args = read_args(iprot, GetGroupCallUrls_args)
      result = GetGroupCallUrls_result.new()
      begin
        result.success = @handler.getGroupCallUrls(args.request)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getGroupCallUrls', seqid)
    end

    def process_joinChatByCallUrl(seqid, iprot, oprot)
      args = read_args(iprot, JoinChatByCallUrl_args)
      result = JoinChatByCallUrl_result.new()
      begin
        result.success = @handler.joinChatByCallUrl(args.request)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'joinChatByCallUrl', seqid)
    end

    def process_createGroupCallUrl(seqid, iprot, oprot)
      args = read_args(iprot, CreateGroupCallUrl_args)
      result = CreateGroupCallUrl_result.new()
      begin
        result.success = @handler.createGroupCallUrl(args.request)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'createGroupCallUrl', seqid)
    end

    def process_deleteGroupCallUrl(seqid, iprot, oprot)
      args = read_args(iprot, DeleteGroupCallUrl_args)
      result = DeleteGroupCallUrl_result.new()
      @handler.deleteGroupCallUrl(args.request)
      write_result(result, oprot, 'deleteGroupCallUrl', seqid)
    end

    def process_updateGroupCallUrl(seqid, iprot, oprot)
      args = read_args(iprot, UpdateGroupCallUrl_args)
      result = UpdateGroupCallUrl_result.new()
      begin
        result.success = @handler.updateGroupCallUrl(args.request)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateGroupCallUrl', seqid)
    end

    def process_getCallCreditPurchaseHistory(seqid, iprot, oprot)
      args = read_args(iprot, GetCallCreditPurchaseHistory_args)
      result = GetCallCreditPurchaseHistory_result.new()
      begin
        result.success = @handler.getCallCreditPurchaseHistory(args.request)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getCallCreditPurchaseHistory', seqid)
    end

    def process_redeemPaidCallVoucher(seqid, iprot, oprot)
      args = read_args(iprot, RedeemPaidCallVoucher_args)
      result = RedeemPaidCallVoucher_result.new()
      begin
        result.success = @handler.redeemPaidCallVoucher(args.serial, args.language)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'redeemPaidCallVoucher', seqid)
    end

    def process_getCallCreditProducts(seqid, iprot, oprot)
      args = read_args(iprot, GetCallCreditProducts_args)
      result = GetCallCreditProducts_result.new()
      begin
        result.success = @handler.getCallCreditProducts(args.appStoreCode, args.pgCode, args.country, args.language)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getCallCreditProducts', seqid)
    end

    def process_getPaidCallMetadata(seqid, iprot, oprot)
      args = read_args(iprot, GetPaidCallMetadata_args)
      result = GetPaidCallMetadata_result.new()
      begin
        result.success = @handler.getPaidCallMetadata(args.language)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getPaidCallMetadata', seqid)
    end

    def process_getPaidCallBalanceList(seqid, iprot, oprot)
      args = read_args(iprot, GetPaidCallBalanceList_args)
      result = GetPaidCallBalanceList_result.new()
      begin
        result.success = @handler.getPaidCallBalanceList(args.language)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getPaidCallBalanceList', seqid)
    end

    def process_searchPaidCallUserRate(seqid, iprot, oprot)
      args = read_args(iprot, SearchPaidCallUserRate_args)
      result = SearchPaidCallUserRate_result.new()
      begin
        result.success = @handler.searchPaidCallUserRate(args.countryCode, args.language)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'searchPaidCallUserRate', seqid)
    end

    def process_lookupPaidCall(seqid, iprot, oprot)
      args = read_args(iprot, LookupPaidCall_args)
      result = LookupPaidCall_result.new()
      begin
        result.success = @handler.lookupPaidCall(args.dialedNumber, args.language, args.referer)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'lookupPaidCall', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class GetGroupCallUrlInfo_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 2

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::GetGroupCallUrlInfoRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupCallUrlInfo_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GetGroupCallUrlInfoResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupCallUrls_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 2

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::GetGroupCallUrlsRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupCallUrls_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GetGroupCallUrlsResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class JoinChatByCallUrl_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 2

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::JoinChatByCallUrlRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class JoinChatByCallUrl_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::JoinChatByCallUrlResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateGroupCallUrl_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 2

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::CreateGroupCallUrlRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateGroupCallUrl_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CreateGroupCallUrlResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteGroupCallUrl_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 2

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::DeleteGroupCallUrlRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteGroupCallUrl_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateGroupCallUrl_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 2

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::UpdateGroupCallUrlRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateGroupCallUrl_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::UpdateGroupCallUrlResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCallCreditPurchaseHistory_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 2

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::CoinHistoryCondition}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCallCreditPurchaseHistory_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CoinHistoryResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RedeemPaidCallVoucher_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SERIAL = 2
    LANGUAGE = 3

    FIELDS = {
      SERIAL => {:type => ::Thrift::Types::STRING, :name => 'serial'},
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RedeemPaidCallVoucher_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::PaidCallRedeemResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCallCreditProducts_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    APPSTORECODE = 2
    PGCODE = 3
    COUNTRY = 4
    LANGUAGE = 5

    FIELDS = {
      APPSTORECODE => {:type => ::Thrift::Types::I32, :name => 'appStoreCode', :enum_class => ::P0_a_e_a_b_he},
      PGCODE => {:type => ::Thrift::Types::I32, :name => 'pgCode', :enum_class => ::P0_a_e_a_b_fe},
      COUNTRY => {:type => ::Thrift::Types::STRING, :name => 'country'},
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @appStoreCode.nil? || ::P0_a_e_a_b_he::VALID_VALUES.include?(@appStoreCode)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field appStoreCode!')
      end
      unless @pgCode.nil? || ::P0_a_e_a_b_fe::VALID_VALUES.include?(@pgCode)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field pgCode!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCallCreditProducts_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::CoinProductItem}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPaidCallMetadata_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    LANGUAGE = 2

    FIELDS = {
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPaidCallMetadata_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::PaidCallMetadataResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPaidCallBalanceList_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    LANGUAGE = 2

    FIELDS = {
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPaidCallBalanceList_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::PaidCallBalance}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SearchPaidCallUserRate_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    COUNTRYCODE = 2
    LANGUAGE = 3

    FIELDS = {
      COUNTRYCODE => {:type => ::Thrift::Types::STRING, :name => 'countryCode'},
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SearchPaidCallUserRate_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::PaidCallUserRate}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LookupPaidCall_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DIALEDNUMBER = 2
    LANGUAGE = 3
    REFERER = 4

    FIELDS = {
      DIALEDNUMBER => {:type => ::Thrift::Types::STRING, :name => 'dialedNumber'},
      LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'},
      REFERER => {:type => ::Thrift::Types::STRING, :name => 'referer'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LookupPaidCall_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::PaidCallResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

