#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'takagi_chan_types'

module AuthService
  class Client
    include ::Thrift::Client

    def setPassword(authSessionId, encryptedPassword)
      send_setPassword(authSessionId, encryptedPassword)
      return recv_setPassword()
    end

    def send_setPassword(authSessionId, encryptedPassword)
      send_message('setPassword', SetPassword_args, :authSessionId => authSessionId, :encryptedPassword => encryptedPassword)
    end

    def recv_setPassword()
      result = receive_message(SetPassword_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'setPassword failed: unknown result')
    end

    def setIdentifierAndPassword(authSessionId, request)
      send_setIdentifierAndPassword(authSessionId, request)
      return recv_setIdentifierAndPassword()
    end

    def send_setIdentifierAndPassword(authSessionId, request)
      send_message('setIdentifierAndPassword', SetIdentifierAndPassword_args, :authSessionId => authSessionId, :request => request)
    end

    def recv_setIdentifierAndPassword()
      result = receive_message(SetIdentifierAndPassword_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'setIdentifierAndPassword failed: unknown result')
    end

    def updateIdentifier(authSessionId, request)
      send_updateIdentifier(authSessionId, request)
      return recv_updateIdentifier()
    end

    def send_updateIdentifier(authSessionId, request)
      send_message('updateIdentifier', UpdateIdentifier_args, :authSessionId => authSessionId, :request => request)
    end

    def recv_updateIdentifier()
      result = receive_message(UpdateIdentifier_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateIdentifier failed: unknown result')
    end

    def updatePassword(authSessionId, request)
      send_updatePassword(authSessionId, request)
      return recv_updatePassword()
    end

    def send_updatePassword(authSessionId, request)
      send_message('updatePassword', UpdatePassword_args, :authSessionId => authSessionId, :request => request)
    end

    def recv_updatePassword()
      result = receive_message(UpdatePassword_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updatePassword failed: unknown result')
    end

    def removeIdentifier(authSessionId, request)
      send_removeIdentifier(authSessionId, request)
      return recv_removeIdentifier()
    end

    def send_removeIdentifier(authSessionId, request)
      send_message('removeIdentifier', RemoveIdentifier_args, :authSessionId => authSessionId, :request => request)
    end

    def recv_removeIdentifier()
      result = receive_message(RemoveIdentifier_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'removeIdentifier failed: unknown result')
    end

    def issueTokenForAccountMigration(migrationSessionId)
      send_issueTokenForAccountMigration(migrationSessionId)
      return recv_issueTokenForAccountMigration()
    end

    def send_issueTokenForAccountMigration(migrationSessionId)
      send_message('issueTokenForAccountMigration', IssueTokenForAccountMigration_args, :migrationSessionId => migrationSessionId)
    end

    def recv_issueTokenForAccountMigration()
      result = receive_message(IssueTokenForAccountMigration_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'issueTokenForAccountMigration failed: unknown result')
    end

    def issueTokenForAccountMigrationSettings(enforce)
      send_issueTokenForAccountMigrationSettings(enforce)
      return recv_issueTokenForAccountMigrationSettings()
    end

    def send_issueTokenForAccountMigrationSettings(enforce)
      send_message('issueTokenForAccountMigrationSettings', IssueTokenForAccountMigrationSettings_args, :enforce => enforce)
    end

    def recv_issueTokenForAccountMigrationSettings()
      result = receive_message(IssueTokenForAccountMigrationSettings_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'issueTokenForAccountMigrationSettings failed: unknown result')
    end

    def respondE2EELoginRequest(verifier, publicKey, encryptedKeyChain, hashKeyChain, errorCode)
      send_respondE2EELoginRequest(verifier, publicKey, encryptedKeyChain, hashKeyChain, errorCode)
      recv_respondE2EELoginRequest()
    end

    def send_respondE2EELoginRequest(verifier, publicKey, encryptedKeyChain, hashKeyChain, errorCode)
      send_message('respondE2EELoginRequest', RespondE2EELoginRequest_args, :verifier => verifier, :publicKey => publicKey, :encryptedKeyChain => encryptedKeyChain, :hashKeyChain => hashKeyChain, :errorCode => errorCode)
    end

    def recv_respondE2EELoginRequest()
      result = receive_message(RespondE2EELoginRequest_result)
      raise result.e unless result.e.nil?
      return
    end

    def getAuthRSAKey(authSessionId, identityProvider)
      send_getAuthRSAKey(authSessionId, identityProvider)
      return recv_getAuthRSAKey()
    end

    def send_getAuthRSAKey(authSessionId, identityProvider)
      send_message('getAuthRSAKey', GetAuthRSAKey_args, :authSessionId => authSessionId, :identityProvider => identityProvider)
    end

    def recv_getAuthRSAKey()
      result = receive_message(GetAuthRSAKey_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAuthRSAKey failed: unknown result')
    end

    def setIdentifier(authSessionId, request)
      send_setIdentifier(authSessionId, request)
      return recv_setIdentifier()
    end

    def send_setIdentifier(authSessionId, request)
      send_message('setIdentifier', SetIdentifier_args, :authSessionId => authSessionId, :request => request)
    end

    def recv_setIdentifier()
      result = receive_message(SetIdentifier_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'setIdentifier failed: unknown result')
    end

    def resendIdentifierConfirmation(authSessionId, request)
      send_resendIdentifierConfirmation(authSessionId, request)
      return recv_resendIdentifierConfirmation()
    end

    def send_resendIdentifierConfirmation(authSessionId, request)
      send_message('resendIdentifierConfirmation', ResendIdentifierConfirmation_args, :authSessionId => authSessionId, :request => request)
    end

    def recv_resendIdentifierConfirmation()
      result = receive_message(ResendIdentifierConfirmation_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'resendIdentifierConfirmation failed: unknown result')
    end

    def confirmIdentifier(authSessionId, request)
      send_confirmIdentifier(authSessionId, request)
      return recv_confirmIdentifier()
    end

    def send_confirmIdentifier(authSessionId, request)
      send_message('confirmIdentifier', ConfirmIdentifier_args, :authSessionId => authSessionId, :request => request)
    end

    def recv_confirmIdentifier()
      result = receive_message(ConfirmIdentifier_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'confirmIdentifier failed: unknown result')
    end

    def exchangeKey(authSessionId, request)
      send_exchangeKey(authSessionId, request)
      return recv_exchangeKey()
    end

    def send_exchangeKey(authSessionId, request)
      send_message('exchangeKey', ExchangeKey_args, :authSessionId => authSessionId, :request => request)
    end

    def recv_exchangeKey()
      result = receive_message(ExchangeKey_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'exchangeKey failed: unknown result')
    end

    def setClovaCredential(authSessionId, request)
      send_setClovaCredential(authSessionId, request)
      return recv_setClovaCredential()
    end

    def send_setClovaCredential(authSessionId, request)
      send_message('setClovaCredential', SetClovaCredential_args, :authSessionId => authSessionId, :request => request)
    end

    def recv_setClovaCredential()
      result = receive_message(SetClovaCredential_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'setClovaCredential failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_setPassword(seqid, iprot, oprot)
      args = read_args(iprot, SetPassword_args)
      result = SetPassword_result.new()
      begin
        result.success = @handler.setPassword(args.authSessionId, args.encryptedPassword)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'setPassword', seqid)
    end

    def process_setIdentifierAndPassword(seqid, iprot, oprot)
      args = read_args(iprot, SetIdentifierAndPassword_args)
      result = SetIdentifierAndPassword_result.new()
      begin
        result.success = @handler.setIdentifierAndPassword(args.authSessionId, args.request)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'setIdentifierAndPassword', seqid)
    end

    def process_updateIdentifier(seqid, iprot, oprot)
      args = read_args(iprot, UpdateIdentifier_args)
      result = UpdateIdentifier_result.new()
      begin
        result.success = @handler.updateIdentifier(args.authSessionId, args.request)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateIdentifier', seqid)
    end

    def process_updatePassword(seqid, iprot, oprot)
      args = read_args(iprot, UpdatePassword_args)
      result = UpdatePassword_result.new()
      begin
        result.success = @handler.updatePassword(args.authSessionId, args.request)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updatePassword', seqid)
    end

    def process_removeIdentifier(seqid, iprot, oprot)
      args = read_args(iprot, RemoveIdentifier_args)
      result = RemoveIdentifier_result.new()
      begin
        result.success = @handler.removeIdentifier(args.authSessionId, args.request)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'removeIdentifier', seqid)
    end

    def process_issueTokenForAccountMigration(seqid, iprot, oprot)
      args = read_args(iprot, IssueTokenForAccountMigration_args)
      result = IssueTokenForAccountMigration_result.new()
      begin
        result.success = @handler.issueTokenForAccountMigration(args.migrationSessionId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'issueTokenForAccountMigration', seqid)
    end

    def process_issueTokenForAccountMigrationSettings(seqid, iprot, oprot)
      args = read_args(iprot, IssueTokenForAccountMigrationSettings_args)
      result = IssueTokenForAccountMigrationSettings_result.new()
      begin
        result.success = @handler.issueTokenForAccountMigrationSettings(args.enforce)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'issueTokenForAccountMigrationSettings', seqid)
    end

    def process_respondE2EELoginRequest(seqid, iprot, oprot)
      args = read_args(iprot, RespondE2EELoginRequest_args)
      result = RespondE2EELoginRequest_result.new()
      begin
        @handler.respondE2EELoginRequest(args.verifier, args.publicKey, args.encryptedKeyChain, args.hashKeyChain, args.errorCode)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'respondE2EELoginRequest', seqid)
    end

    def process_getAuthRSAKey(seqid, iprot, oprot)
      args = read_args(iprot, GetAuthRSAKey_args)
      result = GetAuthRSAKey_result.new()
      begin
        result.success = @handler.getAuthRSAKey(args.authSessionId, args.identityProvider)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getAuthRSAKey', seqid)
    end

    def process_setIdentifier(seqid, iprot, oprot)
      args = read_args(iprot, SetIdentifier_args)
      result = SetIdentifier_result.new()
      begin
        result.success = @handler.setIdentifier(args.authSessionId, args.request)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'setIdentifier', seqid)
    end

    def process_resendIdentifierConfirmation(seqid, iprot, oprot)
      args = read_args(iprot, ResendIdentifierConfirmation_args)
      result = ResendIdentifierConfirmation_result.new()
      begin
        result.success = @handler.resendIdentifierConfirmation(args.authSessionId, args.request)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'resendIdentifierConfirmation', seqid)
    end

    def process_confirmIdentifier(seqid, iprot, oprot)
      args = read_args(iprot, ConfirmIdentifier_args)
      result = ConfirmIdentifier_result.new()
      begin
        result.success = @handler.confirmIdentifier(args.authSessionId, args.request)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'confirmIdentifier', seqid)
    end

    def process_exchangeKey(seqid, iprot, oprot)
      args = read_args(iprot, ExchangeKey_args)
      result = ExchangeKey_result.new()
      begin
        result.success = @handler.exchangeKey(args.authSessionId, args.request)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'exchangeKey', seqid)
    end

    def process_setClovaCredential(seqid, iprot, oprot)
      args = read_args(iprot, SetClovaCredential_args)
      result = SetClovaCredential_result.new()
      begin
        result.success = @handler.setClovaCredential(args.authSessionId, args.request)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'setClovaCredential', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class SetPassword_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHSESSIONID = 1
    ENCRYPTEDPASSWORD = 2

    FIELDS = {
      AUTHSESSIONID => {:type => ::Thrift::Types::STRING, :name => 'authSessionId'},
      ENCRYPTEDPASSWORD => {:type => ::Thrift::Types::STRUCT, :name => 'encryptedPassword', :class => ::EncryptedPassword}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetPassword_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::IdentityCredentialResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetIdentifierAndPassword_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHSESSIONID = 2
    REQUEST = 3

    FIELDS = {
      AUTHSESSIONID => {:type => ::Thrift::Types::STRING, :name => 'authSessionId'},
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::IdentityCredentialRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetIdentifierAndPassword_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::IdentityCredentialResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateIdentifier_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHSESSIONID = 2
    REQUEST = 3

    FIELDS = {
      AUTHSESSIONID => {:type => ::Thrift::Types::STRING, :name => 'authSessionId'},
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::IdentityCredentialRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateIdentifier_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::IdentityCredentialResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdatePassword_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHSESSIONID = 2
    REQUEST = 3

    FIELDS = {
      AUTHSESSIONID => {:type => ::Thrift::Types::STRING, :name => 'authSessionId'},
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::IdentityCredentialRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdatePassword_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::IdentityCredentialResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveIdentifier_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHSESSIONID = 2
    REQUEST = 3

    FIELDS = {
      AUTHSESSIONID => {:type => ::Thrift::Types::STRING, :name => 'authSessionId'},
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::IdentityCredentialRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveIdentifier_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::IdentityCredentialResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IssueTokenForAccountMigration_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MIGRATIONSESSIONID = 2

    FIELDS = {
      MIGRATIONSESSIONID => {:type => ::Thrift::Types::STRING, :name => 'migrationSessionId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IssueTokenForAccountMigration_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SecurityCenterResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IssueTokenForAccountMigrationSettings_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ENFORCE = 2

    FIELDS = {
      ENFORCE => {:type => ::Thrift::Types::BOOL, :name => 'enforce'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IssueTokenForAccountMigrationSettings_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SecurityCenterResult},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RespondE2EELoginRequest_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    VERIFIER = 1
    PUBLICKEY = 2
    ENCRYPTEDKEYCHAIN = 3
    HASHKEYCHAIN = 4
    ERRORCODE = 5

    FIELDS = {
      VERIFIER => {:type => ::Thrift::Types::STRING, :name => 'verifier'},
      PUBLICKEY => {:type => ::Thrift::Types::STRUCT, :name => 'publicKey', :class => ::E2EEPublicKey},
      ENCRYPTEDKEYCHAIN => {:type => ::Thrift::Types::STRING, :name => 'encryptedKeyChain'},
      HASHKEYCHAIN => {:type => ::Thrift::Types::STRING, :name => 'hashKeyChain'},
      ERRORCODE => {:type => ::Thrift::Types::I32, :name => 'errorCode', :enum_class => ::P0_a_e_a_b_ca}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @errorCode.nil? || ::P0_a_e_a_b_ca::VALID_VALUES.include?(@errorCode)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field errorCode!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RespondE2EELoginRequest_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAuthRSAKey_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHSESSIONID = 2
    IDENTITYPROVIDER = 3

    FIELDS = {
      AUTHSESSIONID => {:type => ::Thrift::Types::STRING, :name => 'authSessionId'},
      IDENTITYPROVIDER => {:type => ::Thrift::Types::I32, :name => 'identityProvider', :enum_class => ::P0_a_e_a_b_sc}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @identityProvider.nil? || ::P0_a_e_a_b_sc::VALID_VALUES.include?(@identityProvider)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field identityProvider!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAuthRSAKey_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::RSAKey},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetIdentifier_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHSESSIONID = 2
    REQUEST = 3

    FIELDS = {
      AUTHSESSIONID => {:type => ::Thrift::Types::STRING, :name => 'authSessionId'},
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::IdentityCredentialRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetIdentifier_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::IdentityCredentialResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ResendIdentifierConfirmation_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHSESSIONID = 2
    REQUEST = 3

    FIELDS = {
      AUTHSESSIONID => {:type => ::Thrift::Types::STRING, :name => 'authSessionId'},
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::IdentityCredentialRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ResendIdentifierConfirmation_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::IdentityCredentialResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ConfirmIdentifier_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHSESSIONID = 2
    REQUEST = 3

    FIELDS = {
      AUTHSESSIONID => {:type => ::Thrift::Types::STRING, :name => 'authSessionId'},
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::IdentityCredentialRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ConfirmIdentifier_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::IdentityCredentialResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ExchangeKey_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHSESSIONID = 2
    REQUEST = 3

    FIELDS = {
      AUTHSESSIONID => {:type => ::Thrift::Types::STRING, :name => 'authSessionId'},
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::AuthKeyExchangeRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ExchangeKey_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::AuthKeyExchangeResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetClovaCredential_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHSESSIONID = 2
    REQUEST = 3

    FIELDS = {
      AUTHSESSIONID => {:type => ::Thrift::Types::STRING, :name => 'authSessionId'},
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::AuthLoginRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetClovaCredential_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::AuthLoginResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

