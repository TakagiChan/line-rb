#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require_relative 'takagi_chan_types'

module SecondaryQrCodeLoginPermitNoticeService
  class Client
    include ::Thrift::Client

    def checkPinCodeVerified(request)
      send_checkPinCodeVerified(request)
      recv_checkPinCodeVerified()
    end

    def send_checkPinCodeVerified(request)
      send_message('checkPinCodeVerified', CheckPinCodeVerified_args, :request => request)
    end

    def recv_checkPinCodeVerified()
      result = receive_message(CheckPinCodeVerified_result)
      raise result.e unless result.e.nil?
      return
    end

    def checkQrCodeVerified(request)
      send_checkQrCodeVerified(request)
      recv_checkQrCodeVerified()
    end

    def send_checkQrCodeVerified(request)
      send_message('checkQrCodeVerified', CheckQrCodeVerified_args, :request => request)
    end

    def recv_checkQrCodeVerified()
      result = receive_message(CheckQrCodeVerified_result)
      raise result.e unless result.e.nil?
      return
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_checkPinCodeVerified(seqid, iprot, oprot)
      args = read_args(iprot, CheckPinCodeVerified_args)
      result = CheckPinCodeVerified_result.new()
      begin
        @handler.checkPinCodeVerified(args.request)
      rescue ::SecondaryQrCodeException => e
        result.e = e
      end
      write_result(result, oprot, 'checkPinCodeVerified', seqid)
    end

    def process_checkQrCodeVerified(seqid, iprot, oprot)
      args = read_args(iprot, CheckQrCodeVerified_args)
      result = CheckQrCodeVerified_result.new()
      begin
        @handler.checkQrCodeVerified(args.request)
      rescue ::SecondaryQrCodeException => e
        result.e = e
      end
      write_result(result, oprot, 'checkQrCodeVerified', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class CheckPinCodeVerified_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::CheckPinCodeVerifiedRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CheckPinCodeVerified_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SecondaryQrCodeException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CheckQrCodeVerified_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::CheckQrCodeVerifiedRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CheckQrCodeVerified_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SecondaryQrCodeException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

