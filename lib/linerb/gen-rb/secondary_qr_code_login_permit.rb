#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require_relative 'takagi_chan_types'

module SecondaryQrCodeLoginPermit
  class Client
    include ::Thrift::Client

    def cancelPinCode(request)
      send_cancelPinCode(request)
      return recv_cancelPinCode()
    end

    def send_cancelPinCode(request)
      send_message('cancelPinCode', CancelPinCode_args, :request => request)
    end

    def recv_cancelPinCode()
      result = receive_message(CancelPinCode_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'cancelPinCode failed: unknown result')
    end

    def getLoginActorContext(request)
      send_getLoginActorContext(request)
      return recv_getLoginActorContext()
    end

    def send_getLoginActorContext(request)
      send_message('getLoginActorContext', GetLoginActorContext_args, :request => request)
    end

    def recv_getLoginActorContext()
      result = receive_message(GetLoginActorContext_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getLoginActorContext failed: unknown result')
    end

    def verifyPinCode(request)
      send_verifyPinCode(request)
      return recv_verifyPinCode()
    end

    def send_verifyPinCode(request)
      send_message('verifyPinCode', VerifyPinCode_args, :request => request)
    end

    def recv_verifyPinCode()
      result = receive_message(VerifyPinCode_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'verifyPinCode failed: unknown result')
    end

    def verifyQrCode(request)
      send_verifyQrCode(request)
      return recv_verifyQrCode()
    end

    def send_verifyQrCode(request)
      send_message('verifyQrCode', VerifyQrCode_args, :request => request)
    end

    def recv_verifyQrCode()
      result = receive_message(VerifyQrCode_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'verifyQrCode failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_cancelPinCode(seqid, iprot, oprot)
      args = read_args(iprot, CancelPinCode_args)
      result = CancelPinCode_result.new()
      begin
        result.success = @handler.cancelPinCode(args.request)
      rescue ::SecondaryQrCodeException => e
        result.e = e
      end
      write_result(result, oprot, 'cancelPinCode', seqid)
    end

    def process_getLoginActorContext(seqid, iprot, oprot)
      args = read_args(iprot, GetLoginActorContext_args)
      result = GetLoginActorContext_result.new()
      begin
        result.success = @handler.getLoginActorContext(args.request)
      rescue ::SecondaryQrCodeException => e
        result.e = e
      end
      write_result(result, oprot, 'getLoginActorContext', seqid)
    end

    def process_verifyPinCode(seqid, iprot, oprot)
      args = read_args(iprot, VerifyPinCode_args)
      result = VerifyPinCode_result.new()
      begin
        result.success = @handler.verifyPinCode(args.request)
      rescue ::SecondaryQrCodeException => e
        result.e = e
      end
      write_result(result, oprot, 'verifyPinCode', seqid)
    end

    def process_verifyQrCode(seqid, iprot, oprot)
      args = read_args(iprot, VerifyQrCode_args)
      result = VerifyQrCode_result.new()
      begin
        result.success = @handler.verifyQrCode(args.request)
      rescue ::SecondaryQrCodeException => e
        result.e = e
      end
      write_result(result, oprot, 'verifyQrCode', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class CancelPinCode_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::CancelPinCodeRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CancelPinCode_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CancelPinCodeResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SecondaryQrCodeException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetLoginActorContext_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::GetLoginActorContextRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetLoginActorContext_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GetLoginActorContextResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SecondaryQrCodeException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class VerifyPinCode_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::VerifyPinCodeRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class VerifyPinCode_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::VerifyPinCodeResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SecondaryQrCodeException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class VerifyQrCode_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::VerifyQrCodeRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class VerifyQrCode_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::VerifyQrCodeResponse},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::SecondaryQrCodeException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

